/*
 * This source file was generated by the Gradle 'init' task
 */
package com.ustadmobile.zim2xapi

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.core.main
import com.github.ajalt.clikt.core.subcommands
import com.github.ajalt.clikt.parameters.options.default
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.options.required
import com.github.ajalt.clikt.parameters.types.file
import com.github.ajalt.clikt.parameters.types.int
import com.ustadmobile.zim2xapi.SysPathUtil.commandExists
import java.io.File

class KolibriChannels : CliktCommand(name = "list-channels") {
    override fun run() = echo("TODO list all available channels")
}

class KolibriTopics : CliktCommand(name = "list-topics") {
    override val printHelpOnEmptyArgs = true

    val channelId by option("-channel-id", help = "The ID of the channel to list topics for").required()
    val maxDepth by option("-r", "--max-depth", help = "Maximum depth for recursive listing").int()

    override fun run() {
        echo("TODO list topics for a kolibri channel $channelId")
    }

}

class DownloadTopic : CliktCommand(name = "download-topic") {
    override val printHelpOnEmptyArgs = true

    val channelId by option("-channel-id", help = "The channel ID")

    val topicId by option("-topic-id", help = "The topic ID to download")

    val zimDumpPath by option(
        "-zim-dump-path",
        help = "The path to the zimdump binary - can be downloaded from https://download.openzim.org/release/zim-tools/"
    ).file(mustExist = true, canBeDir = false)

    val zimFile by option("-zim-file", help = "Path to an existing ZIM file")
        .file(mustExist = true, canBeDir = false, mustBeReadable = true)

    val kolibiri2zimPath by option(
        "-kolibri2zim-path",
        help = "The path to the kolibri2zim binary - can be downloaded from https://github.com/openzim/kolibri"
    ).file(mustExist = true, canBeDir = false)


    val outputDir by option("-dir", "-output", help = "The output directory for the xApi file")
        .file(canBeFile = false, mustBeWritable = true)
        .default(File(".").canonicalFile)

    val fileName by option("-name", help = "The name of the xApi file")

    override fun run() {

        val processBuilderUseCase = ProcessBuilderUseCase()

        // zimDump required to extract the ZIM file
        if (!commandExists("zimdump", zimDumpPath)) {
            echo(
                "zimdump not found. Please install it from https://download.openzim.org/release/zim-tools/",
                err = true
            )
            return
        }

        val channelId = channelId
        val topicId = topicId
        val zimFile = zimFile

        val createdZimFile: File = zimFile ?: if (channelId != null && topicId != null) {

            val isKolibriAvailable = GetKolibri2ZimUseCase(processBuilderUseCase)
                .isKolibriAvailable(kolibiri2zimPath)

            DownloadKolibriZimUseCase(processBuilderUseCase).invoke(
                channelId,
                topicId,
                outputDir,
                fileName ?: topicId,
                isKolibriAvailable
            )
        } else {
            echo("You must provide either a ZIM file or a Kolibri channel ID and topic.", err = true)
            return
        }

        val fileName = fileName ?: createdZimFile.nameWithoutExtension

        // extract it to a folder,so we can easily zip it later
        val extractedZimFolder = File(outputDir, fileName)
        extractedZimFolder.mkdirs()

        // extract the zim
        ExtractZimUseCase(processBuilderUseCase).invoke(createdZimFile, extractedZimFolder)

        // fix any exceptions found in the folder
        FixExtractZimExceptions(processBuilderUseCase).invoke(createdZimFile, extractedZimFolder)

        // create the xApi zip file
        CreateXapiFileUseCase().invoke(extractedZimFolder, outputDir, fileName)

    }
}

class Khan2Xapi : CliktCommand(name = "khan") {
    override val printHelpOnEmptyArgs = true
    override fun run() = Unit
}

fun main(args: Array<String>) {
    Khan2Xapi()
        .subcommands(
            KolibriChannels(),
            KolibriTopics(),
            DownloadTopic()
        )
        .main(args)
}
